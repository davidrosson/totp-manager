#!/usr/bin/python

"""
Install local Python 3.x dependency:
  - sudo pip install pycryptodome
"""


import getpass
import json
import os
import sys
import time

from hashlib import md5
from base64 import b64decode
from base64 import b64encode
from Crypto import Random
from Crypto.Cipher import AES


home_dir=os.path.expanduser('~')
totp_file='%s/.totp-encr' % home_dir

BLOCK_SIZE = 16
pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * chr(BLOCK_SIZE - len(s) % BLOCK_SIZE)
unpad = lambda s: s[:-s[-1]]


def check_file():
    if os.path.isfile(totp_file):
        read_file()
    else:
        create_file()


def create_file():
    print("\nNo MFA service json file found; creating new '%s' file" % totp_file)
    prompt_action_new()


def prompt_action_new():
    add = set(['add','a','ad'])
    quit = set(['quit','q'])

    print("\nAvailable actions:\n"
          "   Type [A] to add a new service\n"
          "   Type [Q] to quit\n\n")

    try:
        not_answered = True
        while not_answered:
            backtrack(1)
            choice = input("Selection: ").lower()
            if choice not in add and choice not in quit:
                backtrack(1)
                print("You must make a valid choice!")
                time.sleep(2)
            else:
                not_answered = False

    except KeyboardInterrupt:
        keyboard_interrupt(7)
        sys.exit()

    backtrack(8)

    if choice in add:
        data = {}
        add_to_file(set_pin(), data)
    else:
        sys.exit()


def set_pin():
    pin1 = "a"
    pin2 = "b"
    min_digits = 8

    print("\nPlease enter a new encryption PIN (minimum %d digits)\n\n" % min_digits)

    try:
        while pin1 != pin2 or len(str(pin1)) < min_digits or len(str(pin2)) < min_digits:
            while len(str(pin1)) < min_digits:
                backtrack(1)
                pin1 = getpass.getpass('New PIN: ', stream=sys.stdout)
                if len(str(pin1)) < min_digits:
                    backtrack(1)
                    print("The PIN must be at least %d digits; please try again" % min_digits)
                    time.sleep(2.5)

            while len(str(pin2)) < min_digits:
                backtrack(1)
                pin2 = getpass.getpass('Re-enter PIN: ', stream=sys.stdout)
                if len(str(pin2)) < min_digits:
                    backtrack(1)
                    print("The PIN must be at least %d digits; please try again" % min_digits)
                    time.sleep(2.5)

            if pin1 != pin2:
                backtrack(1)
                print("PINs don't match; please try again")
                time.sleep(2)
                pin1 = "a"
                pin2 = "b"

    except KeyboardInterrupt:
        keyboard_interrupt(3)
        check_file()

    backtrack(1)
    print("PIN Accepted!")
    time.sleep(1)
    backtrack(4)

    return pin2


def read_file(pin=None, show_encr=True):
    print("\nExisting '%s' MFA service json file found" % totp_file)

    try:
        data = json.load(open(totp_file))

    except ValueError:
        print("\njson formatting error; exiting...\n")
        sys.exit()

    if len(data) == 0:
        prompt_action_new()
    else:
        print("\nIdentified the following MFA services:")

        count = 0
        for service in sorted(data.keys()):
            count += 1
            print("\n[%d]" % count)
            print("   Shortname: %s" % service)
            print("   Description: %s" % data[service]["description"])

            if show_encr:
                print("   Encrypted MFA Key: %s" % data[service]["encr_secret"])
            else:
                try:
                    print("   Decrypted MFA Key: %s" % decrypt(str(pin), data[service]["encr_secret"]))
                except UnicodeDecodeError:
                    decode_error(3 + 5 * count)
                    check_file()

        prompt_action_exists(data, count)


def prompt_action_exists(data, count):
    add = set(['add','a','ad'])
    modify = set(['modify','m','mod'])
    delete = set(['delete','d','del'])
    show = set(['show','s'])
    quit = set(['quit','q'])

    print("\nAvailable actions:\n"
          "   Type [A] to add a new service\n"
          "   Type [M] to modify an existing service\n"
          "   Type [D] to delete an existing service\n"
          "   Type [S] to show the decrypted MFA keys in plaintext\n"
          "   Type [Q] to quit\n\n")

    try:
        not_answered = True
        while not_answered:
            backtrack(1)
            choice = input("Selection: ").lower()
            if choice not in add and choice not in modify and choice not in delete and choice not in show and choice not in quit:
                backtrack(1)
                print("You must make a valid choice!")
                time.sleep(2)
            else:
                not_answered = False

    except KeyboardInterrupt:
        keyboard_interrupt(12 + 5 * count)
        sys.exit()

    if choice not in quit:
        pin = get_pin(count)

    backtrack(13 + 5 * count)

    if choice in add:
        add_to_file(pin, data)
    elif choice in modify:
        modify_file(pin, data, count)
    elif choice in delete:
        delete_from_file(pin, data, count)
    elif choice in show:
        read_file(pin, False)
    else:
        sys.exit()


def get_pin(count):
    backtrack(1)

    try:
        pin = getpass.getpass('Enter your PIN: ', stream=sys.stdout)

    except KeyboardInterrupt:
        keyboard_interrupt(12 + 5 * count)
        check_file()

    backtrack(1)
    print("PIN Accepted!")
    time.sleep(1)

    return pin


def add_to_file(pin, data):
    print("\n***Add to file***\n\n")

    try:
        backtrack(1)
        print("Enter the shortname of the new service requiring MFA, e.g. aws\n")
        service = input('Shortname: ')

        backtrack(3)
        print("Enter a description for the '%s' service, e.g. Amazon Web Services (username@company)\n" % service)
        desc = input('Description: ')

        secret = ""
        while len(str(secret)) < 16:
            backtrack(3)
            print("Enter the service's secret MFA key (16-64 chars), e.g. JBSWY3DPEHPK3PXPJBSWY3DPEHPK3PXPJBSWY3DPEHPK3PXPJBSWY3DPEHPK3PXP\n")
            secret = input('Secret MFA Key: ')
            if len(str(secret)) < 16:
                backtrack(1)
                print("The PIN must be at least %d digits; please try again" % 16)
                time.sleep(2.5)

    except KeyboardInterrupt:
        keyboard_interrupt(5)
        check_file()

    backtrack(3)
    print("New MFA service details:\n")
    print("   Shortname: %s" % service)
    print("   Description: %s" % desc)
    print("   Secret MFA key: %s\n\n" % secret)

    try:
        backtrack(1)
        confirm = prompt_yes_no("Add the new MFA service? [y/n]: ")

    except KeyboardInterrupt:
        keyboard_interrupt(9)
        check_file()

    if confirm:
        data[service] = {'description':desc, 'encr_secret':encrypt(str(pin), secret)}
        mod_data = json.dumps(data, sort_keys=True, indent=4, separators=(',', ': '))
        process_file(mod_data)
        backtrack(1)
        print("Successfully added new service!")
    else:
        backtrack(1)
        print("Action cancelled!")

    time.sleep(2)
    backtrack(10)
    check_file()


def modify_file(pin, data, count):
    print("\n***Modify file***\n")

    print("Available services:\n")
    for service in sorted(data.keys()):
        print("   Shortname: %s" % service)
    print("\n")

    try:
        not_answered = True
        while not_answered:
            backtrack(1)
            print("Enter the shortname of the service to modify, e.g. aws\n")
            service = input('Shortname: ')
            if service not in data.keys():
                backtrack(1)
                print("You must make a valid choice!")
                time.sleep(2)
                backtrack(2)
            else:
                not_answered = False

    except KeyboardInterrupt:
        keyboard_interrupt(8 + count)
        check_file()

    backtrack(1)
    print("Modifying service '%s'" % service)
    time.sleep(1.5)
    backtrack(6 + count)


    try:
        print("Enter a new shortname for the '%s' service [or leave blank to keep the current '%s' shortname]\n" % (service, service))
        new_name = input('New shortname: ')
        if new_name == "":
            new_name = service

    except KeyboardInterrupt:
        keyboard_interrupt(5)
        check_file()

    backtrack(1)
    print("Input received!")
    time.sleep(1)
    backtrack(3)


    try:
        print("Current description of the '%s' service:\n" % service)
        print("   %s\n" % data[service]["description"])

        print("Enter a new description for the '%s' service [or leave blank to keep the current '%s' description]\n" % (new_name, service))
        desc = input('New description: ')
        if desc == "":
            desc = data[service]["description"]

    except KeyboardInterrupt:
        keyboard_interrupt(9)
        check_file()

    backtrack(1)
    print("Input received!")
    time.sleep(1)
    backtrack(7)


    try:
        print("Current decrypted key of the '%s' service:\n" % service)
        print("   %s\n" % decrypt(pin, data[service]["encr_secret"]))

        secret = "nil"
        while not ( len(str(secret)) == 0 or len(str(secret)) > 15 ):
            print("Enter a new secret MFA key (16-64 chars) for the '%s' service [or leave blank to keep the current '%s' secret MFA key]\n" % (new_name, service))
            secret = input('New secret MFA key: ')
            if secret == "":
                secret = decrypt(pin, data[service]["encr_secret"])
            elif len(str(secret)) < 16:
                backtrack(1)
                print("The PIN must be at least %d digits; please try again" % 16)
                time.sleep(2.5)
                backtrack(3)

    except KeyboardInterrupt:
        keyboard_interrupt(9)
        check_file()
    except UnicodeDecodeError:
        decode_error(5)
        check_file()

    backtrack(1)
    print("Input received!")
    time.sleep(1)
    backtrack(7)


    print("Modified MFA service details:\n")
    print("   Shortname: %s" % new_name)
    print("   Description: %s" % desc)
    print("   Secret MFA Key: %s\n" % secret)

    try:
        confirm = prompt_yes_no("Update the MFA service? [y/n]: ")

    except KeyboardInterrupt:
        keyboard_interrupt(9)
        check_file()

    if confirm:
        del data[service]
        data[new_name] = {'description':desc, 'encr_secret':encrypt(str(pin), secret)}
        mod_data = json.dumps(data, sort_keys=True, indent=4, separators=(',', ': '))
        process_file(mod_data)
        backtrack(1)
        print("Successfully modified service!")
    else:
        backtrack(1)
        print("Action cancelled!")

    time.sleep(2)
    backtrack(10)
    read_file()


def delete_from_file(pin, data, count):
    print("\n***Delete from file***\n")

    print("Available services:\n")
    for service in sorted(data.keys()):
        print("   Shortname: %s" % service)
    print("\n")

    try:
        not_answered = True
        while not_answered:
            backtrack(1)
            print("Enter the shortname of the service to delete, e.g. aws\n")
            service = input('Shortname: ')
            if service not in data.keys():
                backtrack(1)
                print("You must make a valid choice!")
                time.sleep(2)
                backtrack(2)
            else:
                not_answered = False

    except KeyboardInterrupt:
        keyboard_interrupt(8 + count)
        check_file()

    backtrack(1)
    print("Input received!")
    time.sleep(1)
    backtrack(6 + count)


    try:
        print("MFA service selected for deletion:\n")
        print("   Shortname: %s" % service)
        print("   Description: %s" % data[service]["description"])
        print("   Secret MFA Key: %s\n" % decrypt(pin, data[service]["encr_secret"]))

    except UnicodeDecodeError:
        decode_error(7)
        check_file()

    try:
        confirm = prompt_yes_no("Delete the MFA service? [y/n]: ")

    except KeyboardInterrupt:
        keyboard_interrupt(9)
        check_file()

    if confirm:
        del data[service]
        mod_data = json.dumps(data, sort_keys=True, indent=4, separators=(',', ': '))
        process_file(mod_data)
        backtrack(1)
        print("Successfully deleted service!")
    else:
        backtrack(1)
        print("Action cancelled!")

    time.sleep(2)
    backtrack(10)
    read_file()


def prompt_yes_no(message):
    yes = set(['yes','y', 'ye'])
    no = set(['no','n'])

    not_answered = True
    while not_answered:
        backtrack(1)
        choice = input("\n%s" % message).lower()
        if choice not in yes and choice not in no:
            backtrack(1)
            print("You must make a valid choice!")
            time.sleep(2)
            backtrack(1)
        else:
            not_answered = False

    if choice in yes:
        return True
    elif choice in no:
        return False


def encrypt(pin, raw):
    raw = pad(raw)
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(keygen(pin), AES.MODE_CBC, iv)
    return b64encode(iv + cipher.encrypt(raw.encode('utf8'))).decode('utf8')


def decrypt(pin, enc):
    enc = b64decode(enc)
    iv = enc[:16]
    cipher = AES.new(keygen(pin), AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(enc[16:])).decode('utf8')


def keygen(key):
    return md5(key.encode('utf8')).hexdigest().encode('utf8')


def process_file(data):
    file = open(totp_file, "w")
    file.write(data)
    file.close()


def backtrack(rows):
    for x in range(rows):
        sys.stdout.write("\033[1A\033[2K")


def keyboard_interrupt(rows):
    sys.stdout.write("\033[2K")
    backtrack(rows)
    print("\nInput cancelled; exiting...\n")
    time.sleep(2)
    backtrack(3)


def decode_error(rows):
    backtrack(rows)
    print("\nBad PIN; exiting...\n")
    time.sleep(2)
    backtrack(3)


if __name__ == "__main__":
    check_file()

